import { app, BrowserWindow, Menu, dialog, ipcMain } from 'electron';
import XentuProject from './classes/XentuProject';
import XentuCreatorMenu from './menu';

const path = require('path');
const fs = require('fs-extra');
const chokidar = require('chokidar');

// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;


// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
	app.quit();
}


class XentuCreatorApp {
	mainMenu: XentuCreatorMenu;
	project: XentuProject;
	fileWatcher?: any;
	t: number = 55;


	constructor() {
		// setup variables.
		this.mainMenu = new XentuCreatorMenu(this);
		this.project = null;

		// hook window events.
		app.on('ready', this.createWindow);
		app.on('window-all-closed', async () => {
			if (process.platform !== 'darwin') {
				app.quit();
			}
		});
		app.on('activate', () => {
			if (BrowserWindow.getAllWindows().length === 0) {
				this.createWindow();
			}
		});

		// setup the api.
		ipcMain.on('set-title', this.handleSetTitle);
		ipcMain.handle('list-files', this.handleListFiles);
		ipcMain.handle('open-file', this.handleOpenFile);
		ipcMain.handle('open-folder', (e:any) => { this.handleOpenFolder(e) });
		ipcMain.handle('save-file', this.handleSaveFile);
	}


	// #########################################################################
	// Functions
	// #########################################################################


	/**
	 * Creates a new electron window.
	 */
	createWindow(): void {
		// Create the browser window.
		const mainWindow = new BrowserWindow({
			height: 600,
			width: 1024,
			icon: path.join(__dirname, '/../renderer/images/xentu-icon.ico'),
			webPreferences: {
				preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
			},
		});
	
		// and load the index.html of the app.
		mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);
		//setMenuDisabled(true);
		//mainWindow.webContents.openDevTools();
	}


	// #########################################################################
	// API event handlers.
	// #########################################################################


	handleSetTitle(event:any, title:string): void {
		const webContents = event.sender;
		const win = BrowserWindow.fromWebContents(webContents);
		win.setTitle(title);
	}


	handleListFiles(event:any, scanPath: string): void {
		const files = fs.readdirSync( scanPath );
		return files.map( (filename:String) => {
			  const filePath = path.resolve( scanPath, filename );
			  const fileStats = fs.statSync( filePath );
			  const isDirectory = fileStats.isDirectory();
			  return {
					name: filename,
					path: filePath,
					directory: isDirectory,
					ext: isDirectory ? 'folder' : filename.split('.').pop(),
					size: Number( fileStats.size / 1000 ).toFixed( 1 ), // kb
			  };
		});
	}


	async handleOpenFile(event:any, filePath: string) {
		const theData = await fs.readFile(filePath, 'utf-8');
		const ext = filePath.split('.').pop();
		let lang = 'text';
	
		switch (ext) {
			case 'js': lang = 'javascript'; break;
			case 'json': lang = 'text'; break;
			case 'toml': lang = 'toml'; break;
			case 'lua': lang = 'lua'; break;
			case 'py': lang = 'python'; break;
			case 'xml': lang = 'xml'; break;
		}
	
		return JSON.stringify({
			label: path.basename(filePath),
			lang: lang,
			path: filePath,
			data: theData
		});
	}


	async handleOpenFolder(event:any) {
		const window = BrowserWindow.getAllWindows()[0];

		const dlgResult = await dialog.showOpenDialog(window, { properties: ['openDirectory'] });
		if (dlgResult.canceled == false) {
			// read the selected path.
			const selectedPath = dlgResult.filePaths[0];
			// read the project file if one exists.
			const projectFile = path.join(selectedPath, 'game.json');
			const projectFileExists = await fs.pathExists(projectFile);

			if (projectFileExists) {
				this.project = await XentuProject.Load(projectFile);
			}
			else {
				this.project = new XentuProject();
			}

			this.fileWatcher = chokidar.watch(selectedPath, {
				ignored: /(^|[\/\\])\../, // ignore dot files
				persistent: true
			});
			this.fileWatcher
			.on('add',			(path:string) => this.triggerFileAction('file-created', path))
			.on('change',		(path:string) => this.triggerFileAction('file-changed', path))
			.on('unlink',		(path:string) => this.triggerFileAction('file-removed', path))
			.on('addDir',		(path:string) => this.triggerFileAction('dir-created', path))
  			.on('unlinkDir',	(path:string) => this.triggerFileAction('dir-removed', path));

			this.project.path = selectedPath;
			window.webContents.send('projectPathChanged', selectedPath);
			window.webContents.send('projectTitleChanged', this.project.title);
			window.webContents.send('triggerAction', 'hide-welcome', null );
		}
	}

	
	async handleSaveFile(event:any, filePath: string, data:string) {
		try {
			await fs.outputFile(filePath, data, 'utf-8');
			return JSON.stringify({	success: true,	message: 'Saved!'	});
		}
		catch (err) {
			return JSON.stringify({ success: false, message: err });
	 	}
	}


	triggerAction(action:string, data:string = null) {
		const window = BrowserWindow.getAllWindows()[0];
		window.webContents.send('triggerAction', action, data);
	}

	triggerFileAction(action:string, data:string = null) {
		const window = BrowserWindow.getAllWindows()[0];
		window.webContents.send('projectPathChanged', this.project.path);
		window.webContents.send('triggerAction', action, data);
	}
	
}


new XentuCreatorApp();