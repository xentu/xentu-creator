import { app, BrowserWindow, Menu, ipcMain } from 'electron';
const path = require( 'path' );
const fs = require( 'fs-extra' );

// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;


// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
	app.quit();
}


// ############################################################################
// Back-end functions go here.
// ############################################################################


/**
 * Set weather the main menu is in a disabled state (project not open).
 */
const setMenuDisabled = (disabled: boolean): void => {
	const ids = ['MenuFileClose', 'MenuFileSave', 'MenuFileSaveAs', 
				    'MenuFileSaveAll', 'MenuFileProperties', 'MenuFileReveal',
					 'MenuFileExport', 'MenuEdit', 'MenuRun'
					];
	const menu = Menu.getApplicationMenu();

	ids.forEach(id => {
		menu.getMenuItemById(id).enabled = !disabled;
	});
}


/**
 * Creates a new electron window.
 */
const createWindow = (): void => {
	// Create the browser window.
	const mainWindow = new BrowserWindow({
		height: 600,
		width: 1024,
		icon: path.join(__dirname, '/../renderer/images/xentu-icon.ico'),
		webPreferences: {
      	preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
		},
	});

	// and load the index.html of the app.
	mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);
	setMenuDisabled(true);

	// Open the DevTools.
	//mainWindow.webContents.openDevTools();
};


// ############################################################################
// Window level events.
// ############################################################################


app.on('ready', createWindow);


app.on('window-all-closed', async () => {
	if (process.platform !== 'darwin') {
		app.quit();
	}
});


app.on('activate', () => {
	if (BrowserWindow.getAllWindows().length === 0) {
		createWindow();
	}
});


// ############################################################################
// API events.
// ############################################################################


ipcMain.on('set-title', (event, title) => {
	const webContents = event.sender;
	const win = BrowserWindow.fromWebContents(webContents);
	win.setTitle(title);
});


ipcMain.handle('list-files', (event, scanPath: string) => {
	const files = fs.readdirSync( scanPath );
   return files.map( (filename:String) => {
        const filePath = path.resolve( scanPath, filename );
        const fileStats = fs.statSync( filePath );
		  const isDirectory = fileStats.isDirectory();
        return {
            name: filename,
            path: filePath,
				directory: isDirectory,
				ext: isDirectory ? 'folder' : filename.split('.').pop(),
            size: Number( fileStats.size / 1000 ).toFixed( 1 ), // kb
        };
   });
});


ipcMain.handle('open-file', async (event, filePath: string) => {
	const theData = await fs.readFile(filePath, 'utf-8');
	const ext = filePath.split('.').pop();
	let lang = 'text';

	switch (ext) {
		case 'js': lang = 'javascript'; break;
		case 'json': lang = 'text'; break;
		case 'toml': lang = 'toml'; break;
		case 'lua': lang = 'lua'; break;
		case 'py': lang = 'python'; break;
		case 'xml': lang = 'xml'; break;
	}

	return JSON.stringify({
		label: path.basename(filePath),
		lang: lang,
		path: filePath,
		data: theData
	});
});


require("./menu.ts");